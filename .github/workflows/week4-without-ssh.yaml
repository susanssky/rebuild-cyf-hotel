name: Week4 Coursewrok without ssh to pass sql and compose file
# on: push
permissions: # because use role-to-assume to login aws
  id-token: write
  contents: read
on:
  project:
    types: deleted
jobs:
  RDS:
    runs-on: ubuntu-latest
    outputs:
      rds-user: ${{ steps.tf-outputs.outputs.RDS_USER }}
      rds-pw: ${{ steps.tf-outputs.outputs.RDS_PW }}
      rds-url: ${{ steps.tf-outputs.outputs.RDS_URL }}
      vpc-id: ${{ steps.tf-outputs.outputs.VPC_ID }}
      ec2-sg-id: ${{ steps.tf-outputs.outputs.EC2_SG_ID }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        # v= if there is no update in 'backend' folder
        if: steps.filter.outputs.backend == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: push backend image to hub if there are any updadte in backend
        if: steps.filter.outputs.backend == 'true'
        run: |
          docker build -f Dockerfile.backend -t susanssky/cyf-hotel-backend:latest .
          docker push susanssky/cyf-hotel-backend:latest
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false # for get the terraform output value
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::503447358475:role/aws-gh-action
          aws-region: eu-west-2
      - name: Terraform command
        working-directory: ./terraform-week4-without-ssh/1-rds
        run: |
          terraform init
          terraform fmt -check
          terraform apply -auto-approve -var "database_username=${{ secrets.POSTGRES_USER }}" -var "database_password=${{ secrets.POSTGRES_PASSWORD }}"
      - name: save the outputs value from tf to the outputs in this job
        id: tf-outputs
        working-directory: ./terraform-week4-without-ssh/1-rds
        run: |
          echo "RDS_URL=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_OUTPUT
          echo "EC2_SG_ID=$(terraform output -raw ec2_sg_id)" >> $GITHUB_OUTPUT

  EC2:
    needs: [RDS]
    runs-on: ubuntu-latest
    env:
      RDS_USER: ${{ secrets.POSTGRES_USER }}
      RDS_PW: ${{ secrets.POSTGRES_PASSWORD }}
      RDS_URL: ${{ needs.RDS.outputs.rds-url }}
      VPC_ID: ${{ needs.RDS.outputs.vpc-id }}
      EC2_SG_ID: ${{ needs.RDS.outputs.ec2-sg-id }}
    outputs:
      ec2-ip: ${{ steps.tf-outputs.outputs.EC2_IP }}
      ec2-id: ${{ steps.tf-outputs.outputs.EC2_ID }}
      ec2-private_key: ${{ steps.tf-outputs.outputs.EC2_PRIVATE_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false # for get the terraform output value
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::503447358475:role/aws-gh-action
          aws-region: eu-west-2
      - name: Terraform command
        working-directory: ./terraform-week4-without-ssh/2-ec2-userdata
        run: |
          terraform init
          terraform fmt -check
          terraform apply -auto-approve -var "ec2_sg_id=${{ env.EC2_SG_ID }}" -var "vpc_id=${{ env.VPC_ID }}" -var "database_username=${{ env.RDS_USER }}" -var "database_password=${{ env.RDS_PW }}" -var "database_endpoint=${{ env.RDS_URL }}" -var "current_repo_name=${{ github.event.repository.name }}"
      - name: save the outputs value from tf to the outputs in this job
        id: tf-outputs
        working-directory: ./terraform-week4-without-ssh/2-ec2-userdata
        run: |
          echo "EC2_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT

  S3:
    needs: [EC2]
    runs-on: ubuntu-latest
    env:
      EC2_IP: ${{ needs.EC2.outputs.ec2-ip }}
      SERVER_PORT: 4000
    steps:
      - uses: actions/checkout@v4
      - name: 'Create env file'
        working-directory: ./client
        run: |
          echo "VITE_SERVER_URL=http://${EC2_IP}:${SERVER_PORT}" > .env
          cat .env
      - name: build static frontend website
        working-directory: ./client
        run: |
          npm ci
          npm run build
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::503447358475:role/aws-gh-action
          aws-region: eu-west-2
      - name: Terraform command
        working-directory: ./terraform-week4-without-ssh/3-s3
        run: |
          terraform init
          terraform fmt -check
          terraform apply -auto-approve
