name: Week4 Coursewrok with ansible
on: push
permissions: # because use role-to-assume to login aws
  id-token: write
  contents: read
# on:
#   project:
#     types: deleted
jobs:
  RDS:
    runs-on: ubuntu-latest
    outputs:
      rds-url: ${{ steps.tf-outputs.outputs.RDS_URL }}
      ec2-sg-id: ${{ steps.tf-outputs.outputs.EC2_SG_ID }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        # v= if there is no update in 'backend' folder
        if: steps.filter.outputs.backend == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: push backend image to hub if there are any updadte in backend
        if: steps.filter.outputs.backend == 'true'
        run: |
          docker build -f Dockerfile.backend -t susanssky/cyf-hotel-backend:latest .
          docker push susanssky/cyf-hotel-backend:latest
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false # for get the terraform output value
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::600627343623:role/aws-gh-action
          aws-region: eu-west-2
      - name: Terraform command
        working-directory: ./terraform-week4-without-ssh/1-rds
        run: |
          terraform init
          terraform fmt -check
          terraform apply -auto-approve -var "database_username=${{ secrets.POSTGRES_USER }}" -var "database_password=${{ secrets.POSTGRES_PASSWORD }}"
      - name: save the outputs value from tf to the outputs in this job
        id: tf-outputs
        working-directory: ./terraform-week4-without-ssh/1-rds
        run: |
          echo "RDS_URL=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT
          echo "EC2_SG_ID=$(terraform output -raw ec2_sg_id)" >> $GITHUB_OUTPUT

  EC2:
    needs: [RDS]
    runs-on: ubuntu-latest
    env:
      EC2_SG_ID: ${{ needs.RDS.outputs.ec2-sg-id }}
    outputs:
      ec2-ip: ${{ steps.tf-outputs.outputs.EC2_IP }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false # for get the terraform output value
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::600627343623:role/aws-gh-action
          aws-region: eu-west-2
      - name: Terraform command
        working-directory: ./terraform-week4-without-ssh/2-ec2
        run: |
          terraform init
          terraform fmt -check
          terraform apply -auto-approve -var "ec2_sg_id=${{ env.EC2_SG_ID }}" -var "ec2_public_key=${{ secrets.EC2_PUBLIC_KEY }}"
      - name: Save the outputs value from tf to the outputs in this job
        id: tf-outputs
        working-directory: ./terraform-week4-without-ssh/2-ec2
        run: |
          echo "EC2_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT

  Configure_EC2:
    needs: [EC2, RDS]
    runs-on: ubuntu-latest
    env:
      RDS_USER: ${{ secrets.POSTGRES_USER }}
      RDS_PW: ${{ secrets.POSTGRES_PASSWORD }}
      RDS_URL: ${{ needs.RDS.outputs.rds-url }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::600627343623:role/aws-gh-action
          aws-region: eu-west-2

      - name: Install boto3 and botocore
        run: |
          /opt/pipx/venvs/ansible-core/bin/python -m pip install boto3 botocore
      - name: Create private key file
        working-directory: ./ansible-week4
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > tf-aws-ec2-key.pem
          chmod 600 tf-aws-ec2-key.pem
      - name: Ansible command
        working-directory: ./ansible-week4
        run: |
          ansible-playbook configuration-ec2.yaml -e database_username=${{ env.RDS_USER }} -e database_password=${{ env.RDS_PW }} -e database_endpoint=${{ env.RDS_URL }}

  S3:
    needs: [EC2, Configure_EC2]
    runs-on: ubuntu-latest
    env:
      EC2_IP: ${{ needs.EC2.outputs.ec2-ip }}
      SERVER_PORT: 4000
    steps:
      - uses: actions/checkout@v4
      - name: 'Create env file' 
        working-directory: ./client
        run: |
          echo "VITE_SERVER_URL=http://${EC2_IP}:${SERVER_PORT}" > .env
          cat .env
      - name: build static frontend website
        working-directory: ./client
        run: |
          npm ci
          npm run build
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::600627343623:role/aws-gh-action
          aws-region: eu-west-2
      - name: Terraform command
        working-directory: ./terraform-week4-without-ssh/3-s3
        run: |
          terraform init
          terraform fmt -check
          terraform apply -auto-approve
