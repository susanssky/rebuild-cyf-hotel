name: Week3 Coursewrok
on: push
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - name: database
            dockerfile: Dockerfile.database
          - name: backend
            dockerfile: Dockerfile.backend
          - name: frontend
            dockerfile: Dockerfile.frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker Build
        run: docker build -f ${{ matrix.image.dockerfile }} -t susanssky/devops:cyf-hotel-${{ matrix.image.name }} .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Image
        run: docker push susanssky/devops:cyf-hotel-${{ matrix.image.name }}

  ec2-deployment:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install yq for grab services database name in docker-compose.yaml
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.12.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Extract Services Data Name
        id: services-database-name
        run: |
          SERVICES=$(yq eval '.services | keys | .[0]' docker-compose.yaml)
          echo "services=$SERVICES" >> $GITHUB_OUTPUT

      - name: login with ssh & pass the docker-compose.yaml to ec2 & docker-compose down && docker-compose up
        env:
          HOSTNAME: ${{ secrets.EC2_HOST_NAME }}
          # Because the IP address of an EC2 instance changes when it is stopped and then started again,
          # the value of a certain secret here must be manually updated. Therefore,
          # this job fail because I did not enable the EC2 instance and update the secret value.

          PRIVATE_KEY: ${{ secrets.AWS_KEY_PAIR }}
          USER_NAME: ${{ secrets.EC2_USERNAME }}

          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          SERVER_PORT: 4000

        run: |
          echo "$PRIVATE_KEY" > private_key
          chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key $USER_NAME@$HOSTNAME << EOF
          docker-compose down
          scp -o StrictHostKeyChecking=no -i private_key ./docker-compose.yaml $USER_NAME@$HOSTNAME:./
          docker-compose pull && \
          POSTGRES_DB=${POSTGRES_DB} POSTGRES_USER=${POSTGRES_USER} POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
          SERVER_PORT=${SERVER_PORT} \
          DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${{ steps.services-database-name.outputs.services }}:5432/${POSTGRES_DB}?sslmode=disable \
          VITE_SERVER_URL=http://$(ec2metadata --public-ipv4):${SERVER_PORT} docker-compose up -d && \
          docker image prune -a -f
          EOF
