name: Reusable Week5 Workflow
on:
  workflow_call:
    inputs:
      ansible_playbook:
        description: 'Ansible playbook file to run'
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      POSTGRES_USER:
        required: true
      POSTGRES_PASSWORD:
        required: true
      EC2_PUBLIC_KEY:
        required: true
      EC2_PRIVATE_KEY:
        required: true

jobs:
  RDS:
    runs-on: ubuntu-latest
    outputs:
      secret-arn: ${{ steps.tf-outputs.outputs.SECRET_ARN }}
      ec2-sg-id: ${{ steps.tf-outputs.outputs.EC2_SG_ID }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'server/**'
      - uses: docker/login-action@v3
        if: steps.filter.outputs.backend == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push backend image to hub if there are any updates in backend
        if: steps.filter.outputs.backend == 'true'
        run: |
          docker build -f Dockerfile.backend -t susanssky/cyf-hotel-backend:latest .
          docker push susanssky/cyf-hotel-backend:latest
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::600627343623:role/aws-gh-action
          aws-region: eu-west-2
      - name: Terraform command
        working-directory: ./terraform-week5-grafana/1-rds
        run: |
          terraform init
          terraform fmt -check
          terraform apply -auto-approve -var "database_username=${{ secrets.POSTGRES_USER }}" -var "database_password=${{ secrets.POSTGRES_PASSWORD }}"
      - name: Save the outputs value from tf to the outputs in this job
        id: tf-outputs
        working-directory: ./terraform-week5-grafana/1-rds
        run: |
          echo "SECRET_ARN=$(terraform output -raw secret_manager_arn)" >> $GITHUB_OUTPUT
          echo "EC2_SG_ID=$(terraform output -raw ec2_sg_id)" >> $GITHUB_OUTPUT

  EC2:
    needs: [RDS]
    runs-on: ubuntu-latest
    env:
      EC2_SG_ID: ${{ needs.RDS.outputs.ec2-sg-id }}
      SECRET_ARN: ${{ needs.RDS.outputs.secret-arn }}
    outputs:
      ec2-ip: ${{ steps.tf-outputs.outputs.EC2_IP }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::600627343623:role/aws-gh-action
          aws-region: eu-west-2
      - name: Terraform command
        working-directory: ./terraform-week5-grafana/2-ec2
        run: |
          terraform init
          terraform fmt -check
          terraform apply -auto-approve -var "secret_manager_arn=${{ env.SECRET_ARN }}" -var "ec2_sg_id=${{ env.EC2_SG_ID }}" -var "ec2_public_key=${{ secrets.EC2_PUBLIC_KEY }}"
      - name: Save the outputs value from tf to the outputs in this job
        id: tf-outputs
        working-directory: ./terraform-week5-grafana/2-ec2
        run: |
          echo "EC2_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT

  Configure_EC2:
    needs: [EC2, RDS]
    runs-on: ubuntu-latest
    env:
      SECRET_ARN: ${{ needs.RDS.outputs.secret-arn }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::600627343623:role/aws-gh-action
          aws-region: eu-west-2
      - name: Install boto3 and botocore
        run: |
          /opt/pipx/venvs/ansible-core/bin/python -m pip install boto3 botocore
      - name: Create private key file
        working-directory: ./ansible-week5
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > tf-aws-ec2-key.pem
          chmod 600 tf-aws-ec2-key.pem
      - name: Ansible command
        working-directory: ./ansible-week5
        run: |
          ansible-playbook ${{ inputs.ansible_playbook }} -e secret_arn=${{ env.SECRET_ARN }}

  # S3:
  #   needs: [EC2, Configure_EC2]
  #   runs-on: ubuntu-latest
  #   env:
  #     EC2_IP: ${{ needs.EC2.outputs.ec2-ip }}
  #     SERVER_PORT: 4000
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Create env file
  #       working-directory: ./client
  #       run: |
  #         echo "VITE_SERVER_URL=http://${EC2_IP}:${SERVER_PORT}" > .env
  #         cat .env
  #     - name: Build static frontend website
  #       working-directory: ./client
  #       run: |
  #         npm ci
  #         npm run build
  #     - uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_wrapper: false
  #     - uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: arn:aws:iam::600627343623:role/aws-gh-action
  #         aws-region: eu-west-2
  #     - name: Terraform command
  #       working-directory: ./terraform-week5-grafana/3-s3
  #       run: |
  #         terraform init
  #         terraform fmt -check
  #         terraform apply -auto-approve